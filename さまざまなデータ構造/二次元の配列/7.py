"""
ライフゲームは、2 次元のグリッド上で行う生命の誕生と死のシミュレーションです。 
グリッドの各マスは色が塗られているか塗られていないかのどちらかであり、色が塗られているマスは「生きているマス」、塗られていないマスは「死んでいるマス」と呼びます。
ライフゲームにおいて、各グリッドの状態はステップが進むごとに変化します。 

具体的には、すべてのマスは次のルールにしたがって一斉に変化します。
自身に 8 方向に隣接しているマスのうち生きているマスの個数を x とする。 次の世代における自身の状態は次のルールにしたがって決定する。
・　自身が死んでいるかつ x=3 ならば生きたマスとなる。
・　自身が生きているかつ x=2 or 3 ならば生き続ける。
・　自身が生きているかつ x≤1 ならば過疎により死滅する。
・　自身が生きているかつ x≥4 ならば過密により死滅する。

縦横 N マスのグリッドの初期状態の情報が N 個の長さ N の文字列 S0,S1,…,SN−1から与えられます。 
Si,j文字目はグリッドの上から i 行目、左から j 行目の状態を表しており、 Si,jが . のときマスは白く、 # のときマスは黒く塗られています。
なお、与えられた縦横 N マスのグリッドの外部にはマスがないものと考えることにします。
X ステップ後のグリッドはどのような状態になるか答えてください。
"""

N, X = map(int, input().split())
S = [input() for _ in range(N)]

for _ in range(X):
    new_S = [list(row) for row in S]
    for i in range(N):
        for j in range(N):
            cnt = 0
            for dx in [-1, 0, 1]:
                for dy in [-1, 0, 1]:
                    if dx == 0 and dy == 0:
                        continue
                    ni, nj = i + dx, j + dy
                    if 0 <= ni < N and 0 <= nj < N and S[ni][nj] == "#":
                        cnt += 1
            
            if S[i][j] == "." and cnt == 3:
                new_S[i][j] = "#"
            elif S[i][j] == "#" and (cnt < 2 or cnt > 3):
                new_S[i][j] = "."
    S = new_S

for row in S:
    print("".join(row))
